import java.awt.Color;
import java.awt.Component;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Rectangle2D;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JProgressBar;

import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;

import libsvm.svm;
import libsvm.svm_model;
import libsvm.svm_node;


public class plot_predictions {
	private svm_model model;
	private svm_node[] x;
	private static int dots_drawn;
	private static int total_dots = 1;
	
	
	public plot_predictions(svm_model model){
		setModel(model);
	}
	
	public void setModel(svm_model model){
		this.model = model;
	}
	
	public double predict(double[] point){
		
		x = new svm_node[point.length];
		for(int j=0;j<point.length;j++){
			x[j] = new svm_node();
			x[j].index = j+1;
			x[j].value = point[j];
		}

		return svm.svm_predict(model,x);
	}
	
	// Method for predicting a single point
	public double predict(String line){
		int m = 2;
		x = new svm_node[m];
		
		StringTokenizer st = new StringTokenizer(line," \t\n\r\f:");
		for(int j=0;j<m;j++){
			x[j] = new svm_node();
			x[j].index = atoi(st.nextToken());
			x[j].value = atof(st.nextToken());
		}

		return svm.svm_predict(model,x);
	}
	
	public svm_node[] getNode(){
		return x;
	}
	
	
	private static double atof(String nextToken) {
		// TODO Auto-generated method stub
		return Double.parseDouble(nextToken);
	}

	private static int atoi(String nextToken) {
		// TODO Auto-generated method stub
		return Integer.parseInt(nextToken);
	}

	
	public static svm_model loadModel(String model_file) throws IOException{
		svm_model model = svm.svm_load_model(model_file);
		if (model == null)
		{
			System.err.print("can't open model file "+model_file+"\n");
			System.exit(1);
		}
		return model;
	}
	

	public static double[] findBounds(String input_file_name, double percent_ext)throws IOException{

			BufferedReader fp = new BufferedReader(new FileReader(input_file_name));
			boolean first_line = false;
			double [] xymaxmin = new double[4]; // 0:xmax, 1:xmin, 2:ymax 3:ymin
			String line;
			
			while((line = fp.readLine()) !=null)
			{				
				StringTokenizer st = new StringTokenizer(line," \t\n\r\f:");
				st.nextToken();

				int m = 2;
				svm_node[] x = new svm_node[m];
				
				for(int j=0;j<m;j++)
				{
					x[j] = new svm_node();
					try{
						x[j].index = atoi(st.nextToken());
						x[j].value = atof(st.nextToken());
					} catch (java.util.NoSuchElementException e){
						x[j].value = 0;
					}
					
				}
				if(!first_line){
					xymaxmin[0] = xymaxmin[1] = x[0].value;	//set xmax and xmin 
					xymaxmin[2] = xymaxmin[3] = x[1].value;	//set ymax and ymin
					first_line = true;
					continue;
				}
				if(x[0].value > xymaxmin[0])	xymaxmin[0] = x[0].value;
				else if(x[0].value < xymaxmin[1])	xymaxmin[1] = x[0].value;
				
				if(x[1].value > xymaxmin[2])	xymaxmin[2] = x[1].value;
				else if(x[1].value < xymaxmin[3])	xymaxmin[3] = x[1].value;
			}
			fp.close();
			double[] extension = {percent_ext/100*(xymaxmin[0]-xymaxmin[1]), percent_ext/100*(xymaxmin[2]-xymaxmin[3])};
			
			// Adjust the bounds
			xymaxmin[0] +=extension[0];
			xymaxmin[1] -=extension[0];
			xymaxmin[2] +=extension[1];
			xymaxmin[3] -=extension[1];
			return xymaxmin;
	}
	
	// return type
	// [no.of dots][xy]
	public static double[][] generateDots(double[] xymaxmin, int x_dimen, int y_dimen){
		total_dots = x_dimen*y_dimen;
//		dots_drawn = 0;
		double xmax = xymaxmin[0];
		double xmin = xymaxmin[1];
		double ymax = xymaxmin[2];
		double ymin = xymaxmin[3];
		
		double xinc = (xmax-xmin)/(double)x_dimen;
		double yinc = (ymax-ymin)/(double)y_dimen;
		
		double xcur = xmin;
		double ycur = ymax;
		
		double[][] result = new double[x_dimen*y_dimen][2];
		for(int i=0; i<x_dimen; i++){
			for(int j=0; j<y_dimen; j++){
				result[i*y_dimen +j ][0] = xcur;
				result[i*y_dimen +j ][1] = ycur;
				ycur-=yinc;	//increment y
//				dots_drawn++;
			}
			xcur+=xinc;	//increment x
			ycur = ymax;	//reset y
		}
		return result;
	}
	
	public double[][] getSV(){
		svm_node[][] node = model.SV;
		int m=2;
		double[][] resultSV = new double[node.length][m];
		for(int i=0;i<node.length;i++)
		{
			for(int j=0;j<m;j++)
			resultSV[i][j] = node[i][j].value;
			
		}
		total_dots += node.length;
		return resultSV;
	}
	public static void main(String args[]) throws IOException{
		final String MODEL_FILE = "C:/Users/testuser/SkyDrive/Documents/4th year project files/Programs/libsvm-3.18/java/atesting1.train.model";
		final String TRAIN_FILE = "C:/Users/testuser/SkyDrive/Documents/4th year project files/Programs/libsvm-3.18/java/atesting1.train";
		
		
		// For the loading dialog
		final JFrame dia= new JFrame();
		dia.setDefaultCloseOperation(JDialog.DO_NOTHING_ON_CLOSE);
		
		JPanel pan = new JPanel();
		pan.setLayout(new BoxLayout(pan, BoxLayout.PAGE_AXIS));
		dia.add(pan);
		final JLabel lab = new JLabel("<html><font size=+1>Creating plot...</font></html>");
		pan.add(lab);
		pan.add(new JLabel("<html><br></html>"));
		lab.setAlignmentX(Component.CENTER_ALIGNMENT);
		final JProgressBar pr = new JProgressBar(0, 100);
		pr.setAlignmentX(Component.CENTER_ALIGNMENT);
		
		pan.add(pr);
		
		final JButton but = new JButton("<html>Abort</html>");
		but.setAlignmentX(Component.CENTER_ALIGNMENT);

		pan.add(but);
		
		but.addActionListener(new ActionListener(){
			public void actionPerformed(ActionEvent arg0) {
				// TODO Auto-generated method stub
				System.err.println("Program aborted");
				System.exit(0);
			}
		});
		
		dia.setUndecorated(true);
		dia.getRootPane().setBorder( BorderFactory.createLineBorder(Color.BLACK) );
		dia.setLocationRelativeTo(null);
		dia.pack();
		dia.setAlwaysOnTop(true);
		dia.setVisible(true);
		
		final Thread a = new Thread(){
			public void run(){
				while(dots_drawn < total_dots){
					
					try {
						Thread.sleep(100);
						pr.setValue(100*dots_drawn/total_dots);
						pr.revalidate();
						pr.repaint();
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
			}
		};
		a.start();
		new Thread(){
			public void run(){
				double[] xymm = new double[0];
				svm_model sm = new svm_model();
				try {
					xymm = findBounds(TRAIN_FILE, 1);
					sm = loadModel(MODEL_FILE);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				System.out.println("x max: "+xymm[0]+"\nx min: "+xymm[1]+"\ny max: "+xymm[2]+"\ny min: "+xymm[3]);
				
				
				plot_predictions pp = new plot_predictions(sm);
				int[] num_label = sm.label;
				String[] str_label = new String[num_label.length];
				for(int i=0; i<str_label.length; i++)
					str_label[i] = itoa(num_label[i]);
				final svm_plot_helper demo = new svm_plot_helper("Sample Plot", str_label);
				demo.adjustAxis(xymm[1],xymm[0],xymm[3],xymm[2]);
				Shape shapeCir  = new Ellipse2D.Double(-2.5,-2.5,5,5);
				Shape shapeRect  = new Rectangle2D.Double(-1.5,-1.5,3,3);
				
				demo.setDotColor(svm_plot_helper.SV, new Color(0,0,0));
				
				demo.setDotShape(svm_plot_helper.SV, shapeCir);
				Color color[][] = new Color[5][2];
				color[0][0] = new Color(0,0,255);
				
//				color[0][1] = new Color(132,132,255);
				color[0][1] = new Color(0,0,255,15);
				color[1][0] = new Color(255,0,0);
//				color[1][1] = new Color(255,132,132);
				color[1][1] = new Color(255,0,0,15);
				color[2][0] = new Color(0,255,0);
//				color[2][1] = new Color(132,255,132);
				color[2][1] = new Color(0,255,0,15);
				color[3][0] = new Color(255,177,18);
				color[3][1] = new Color(255,177,18,15);
				color[4][0] = new Color(249,44,255);
				color[4][1] = new Color(249,44,255,15);
				
				for(int i=0; i<str_label.length; i++){
					demo.setDotColor(str_label[i], svm_plot_helper.DATA, color[i%color.length][0]);
					demo.setDotColor(str_label[i], svm_plot_helper.AREA, color[i%color.length][1]);
				}
				

				demo.setDotShape(svm_plot_helper.SV, shapeCir);
				for(int i=0; i<str_label.length; i++){
					demo.setDotShape(str_label[i], svm_plot_helper.AREA, shapeRect);
					demo.setDotShape(str_label[i], svm_plot_helper.DATA, shapeCir);
				}

				double[][] dots = generateDots(xymm, 300, 300);
				dots_drawn = 0;
				
				
				for(int i=0; i<dots.length; i++){
					double results = pp.predict(dots[i]);
					demo.addData(itoa((int)results),svm_plot_helper.AREA, pp.getNode()[0].value, pp.getNode()[1].value);
					dots_drawn ++;
				}
				
				
				double[][] SVs = pp.getSV();
				for(int i=0; i<SVs.length; i++){
					demo.addData(svm_plot_helper.SV, SVs[i][0], SVs[i][1]);
					dots_drawn ++;
				}

				
				
			    ChartProgressListener chartprogress = new ChartProgressListener(){

					public void chartProgress(ChartProgressEvent arg0) {
						// TODO Auto-generated method stub
						

						if(arg0.getType() == ChartProgressEvent.DRAWING_FINISHED)
							dia.dispose();
					}
			    };


			    demo.addProgressListener(chartprogress);
//			    but.setEnabled(false);
			    lab.setText("<html><font size=+1>Almost done...</font></html>");

			    demo.showDialog(JFrame.EXIT_ON_CLOSE);
//				demo.getChartPanel();
			}
		}.start();
		
		
	}

	static String itoa(int num_label) {
		// TODO Auto-generated method stub
		return String.valueOf(num_label);
	}
	static String itoa(double num_label) {
		// TODO Auto-generated method stub
		return String.valueOf(num_label);
	}
}
