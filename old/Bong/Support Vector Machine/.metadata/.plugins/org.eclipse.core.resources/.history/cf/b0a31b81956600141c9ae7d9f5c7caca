

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Shape;
import javax.swing.JFrame;
import org.jfree.chart.*;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.event.ChartProgressEvent;
import org.jfree.chart.event.ChartProgressListener;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 * @see http://stackoverflow.com/a/13794076/230513
 * @see http://stackoverflow.com/questions/8430747
 * @see http://stackoverflow.com/questions/8048652
 * @see http://stackoverflow.com/questions/7231824
 * @see http://stackoverflow.com/questions/7205742
 * @see http://stackoverflow.com/questions/7208657
 * @see http://stackoverflow.com/questions/7071057
 * @see http://stackoverflow.com/questions/8736553
 */
public class svm_plot_helper extends JFrame {

	public static final double NEGATIVE = -1.0;
	public static final double POSITIVE = 1.0;
	public static final double NEGTRAIN = -1.1;
	public static final double POSTRAIN = 1.1;
	public static final double SVECTORS = 0.1;
	
    private static final int N = 8;
    private static final int SIZE = 600;
    private static final String title = "Scatter Add Demo";
//    private static final Random rand = new Random();
    private final XYSeries neg = new XYSeries("-1 area");
    private final XYSeries pos = new XYSeries("+1 area");
	private XYPlot xyPlot;
	private final XYSeries postrain = new XYSeries("+1 data");
	private final XYSeries negtrain = new XYSeries("+1 data");
	private final XYSeries svectors = new XYSeries("SV");
	private final XYSeries[] series;
	
	private ChartPanel chartPanel;
	private JFreeChart jfreechart;
	private XYSeriesCollection xySeriesCollection;
	private String[] str_labels;

    public svm_plot_helper(String s, String[] str_labels) {
        super(s);
        chartPanel = createDemoPanel(s);

        chartPanel.setPreferredSize(new Dimension(SIZE, SIZE));
        
        series = new XYSeries[str_labels.length*2+1];
        series[0] = new XYSeries("SV");
        this.str_labels = str_labels;
        for(int i=1; i<series.length; i++){
        	series[i] = new XYSeries(str_labels[i]+" data");
        	series[series.length/2+i] = new XYSeries(str_labels[i]+ "area");
        }
//        this.add(chartPanel, BorderLayout.CENTER);
/*        JPanel control = new JPanel();
        control.add(new JButton(new AbstractAction("Move") {

            
            public void actionPerformed(ActionEvent e) {
                for (int i = 0; i < N / 2; i++) {
                    XYDataItem item = neg.remove(0);
                    if (item != null) {
                        pos.add(item);
                    }
                }
            }
        }));
        this.add(control, BorderLayout.SOUTH);
*/    }

    public void showDialog(int close_option){
        JFrame aa = new JFrame(title);
        aa.setDefaultCloseOperation(close_option);
        aa.setLayout(new BorderLayout());
        aa.add(chartPanel, BorderLayout.CENTER);
        
        aa.pack();
//        chartPanel.setVisible(false);
        aa.setVisible(true);
//        System.out.println("Done");
    }
    public ChartPanel getChartPanel(){
    	return chartPanel;
    }
    private ChartPanel createDemoPanel(final String title) {
 
        jfreechart = ChartFactory.createScatterPlot(
            title, "X1", "X2", createSeries(),
            PlotOrientation.VERTICAL, true, true, false);
        xyPlot = (XYPlot) jfreechart.getPlot();
        xyPlot.setDomainCrosshairVisible(true);
        xyPlot.setRangeCrosshairVisible(true);
//        XYItemRenderer renderer = xyPlot.getRenderer();
//       renderer.setSeriesPaint(0, new Color(132,188,255));
//        adjustAxis((NumberAxis) xyPlot.getDomainAxis(), false);
//        adjustAxis((NumberAxis) xyPlot.getRangeAxis(), false);
        xyPlot.setBackgroundPaint(Color.white);
//        CategoryLabelPositions c = CategoryLabelPositions.createDownRotationLabelPositions(Math.PI/2);
        

        return new ChartPanel(jfreechart);
    }

    public void addProgressListener(ChartProgressListener chartprogress){
    	jfreechart.addProgressListener(chartprogress);
    }

    

    
    public void setDotColor(double series, Color color){
    	XYItemRenderer renderer = xyPlot.getRenderer();
    	if(series == NEGATIVE)
        	renderer.setSeriesPaint(3, color);
    	else if(series == POSITIVE)
    		renderer.setSeriesPaint(4, color);
    	else if(series == NEGTRAIN)
    		renderer.setSeriesPaint(1, color);
    	else if(series == POSTRAIN)
    		renderer.setSeriesPaint(2, color);
    	else if(series == SVECTORS)
    		renderer.setSeriesPaint(0, color);
    }
    
    public void setDotShape(double series, Shape shape){
    	XYItemRenderer renderer = xyPlot.getRenderer();
    	if(series == NEGATIVE)
        	renderer.setSeriesShape(3, shape);
    	else if(series == POSITIVE)
    		renderer.setSeriesShape(4, shape);
    	else if(series == NEGTRAIN)
    		renderer.setSeriesShape(1, shape);
    	else if(series == POSTRAIN)
    		renderer.setSeriesShape(2, shape);
    	else if(series == SVECTORS)
    		renderer.setSeriesShape(0, shape);
    }
    
    public void adjustAxis(double minX, double maxX, double minY, double maxY){
    	xyPlot.getDomainAxis().setRange(minX, maxX);
    	xyPlot.getRangeAxis().setRange(minY, maxY);
    }

    private void adjustAxis(NumberAxis axis, boolean vertical) {
        axis.setRange(-6.0, 6.0);
        axis.setTickUnit(new NumberTickUnit(0.5));
        axis.setVerticalTickLabels(vertical);
    }

    private XYDataset createSeries() {
        xySeriesCollection = new XYSeriesCollection();

        xySeriesCollection.addSeries(svectors);
        xySeriesCollection.addSeries(negtrain);
        xySeriesCollection.addSeries(postrain);
        xySeriesCollection.addSeries(neg);
        xySeriesCollection.addSeries(pos);
        
        return xySeriesCollection;
    }
    public void addSeries(String str_label){
    	
    }

    public void addData(double series, double x, double y){
    	if(series == NEGATIVE)
    		neg.add(x,y);
    	else if(series == POSITIVE)
    		pos.add(x,y);
    	else if(series == NEGTRAIN)
    		negtrain.add(x,y);
    	else if(series == POSTRAIN)
    		postrain.add(x,y);
    	else if(series == SVECTORS)
    		svectors.add(x,y);
    	
    }
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                svm_plot_helper demo = new svm_plot_helper(title);
//                demo.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//                demo.pack();
//                demo.setLocationRelativeTo(null);
//                demo.setVisible(true);
                demo.addProgressListener(new ChartProgressListener(){
					public void chartProgress(ChartProgressEvent arg0) {
						// TODO Auto-generated method stub
						if(arg0.getType() == ChartProgressEvent.DRAWING_FINISHED)
							System.out.println("Ploting finished");
					}
                });
            }
        });
    }
}