package Filters;
import Matrices.*;

public class kalman {
	
	Matrix mtrx = new Matrix();
	
	//Transformation matrices
	private double F[][] = new double[2][2]; //State transition matrix - How time t-1 affects t
	private double B[] = new double[2]; //Control input matrix - Applies controls to displacement
	private double H[][] = new double[2]; //Unit transformatino matrix
	private double Q[][] = new double[2]; //Process noise covariance
	
	//System Estimate matrices
	private double x[][] = new double[2]; //Estimated displacement (Past displacement/speed + estimated (max acceleration/deceleration))
	private double P[][] = new double[2]; //Variance of x_t-1 and x_t
	
	public void prediction(){
		//x = F.x + B.u - Change in x during \delta t
		x = mtrx.multiply(F, x);
		
		//P = FPF'+Q - Variance of predicted x_t-1 and real x_t
		double F_t[][] = mtrx.transpose(F);
		double FxP[][] = mtrx.multiply(F, P);
		double FxPxFt[][] = mtrx.multiply(FxP, F_t);
		P = mtrx.add(FxPxFt, Q);
	}
	
	public void updated(){
		//y = z - H.x
		double z[][] = new double[2][2];
		double y[] = new double[2];
		double[][] Hxx = mtrx.multiply(H, x);
		double[][] y = mtrx.subtract(z, Hxx)
				//zt = measurement vector
		
		//S = H P H' + R
		double S[] = new double[2];
		S = H.mult(P).mult(H.transpose()).plus(R);
		
		//Kalman Gain = PH'S^(-1)
		double K[] = new double[2];
		K = P.mult(H.transpose().mult(S.invert()));
		
		//Updated x
		x = x.plus(K.mult(y));
		
		//Updated P
		P = P.minus(K.mult(H).mult(P));
	}
	
	
	private static double 
}
